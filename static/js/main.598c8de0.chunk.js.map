{"version":3,"sources":["components/ToDoItem.js","components/todosData.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","react_default","a","createElement","className","type","checked","item","completed","onChange","handleChange","id","style","fontColor","fontStyle","textDecoration","text","todosData","Header","timeOfDay","hours","Date","getHours","styles","fontSize","textAlign","color","Component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","bind","assertThisInitialized","setState","prevState","map","todo","_this2","todoItems","components_ToDoItem","key","components_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAkBeA,MAhBf,SAAkBC,GAQd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAYC,QAASN,EAAMO,KAAKC,UAAWC,SAAU,kBAAMT,EAAMU,aAAaV,EAAMO,KAAKI,OACrGV,EAAAC,EAAAC,cAAA,KAAGS,MAAOZ,EAAMO,KAAKC,UATN,CACnBK,UAAW,OACXC,UAAW,SACXC,eAAgB,gBAMsC,MAAOf,EAAMO,KAAKS,QC6BjEC,EA1CG,CAAC,CACXN,GAAI,EACJK,KAAM,UACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,YACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,aACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,QACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,WACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,aACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,SACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,wCACNR,WAAW,ICAJU,mLAjCP,IAEIC,EADAC,GADO,IAAIC,MACEC,WAGXC,EAAS,CACXC,SAAU,GACVC,UAAW,SACXC,MAAO,cAkBX,OAfGN,EAAQ,IACPD,EAAY,WACZI,EAAOG,MAAQ,WACTN,GAAS,IAAMA,EAAQ,IAC7BD,EAAY,aACZI,EAAOG,MAAQ,QACTN,GAAS,IAAMA,EAAQ,IAC7BD,EAAY,WACZI,EAAOG,MAAQ,WAEfP,EAAY,SACZI,EAAOG,MAAQ,aAKfzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASQ,MAAOW,GAA9B,QAA4CJ,WA9BvCQ,aCyCNC,cApCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,MAAOpB,GAETY,EAAKnB,aAAemB,EAAKnB,aAAa4B,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IALRA,4EAQDlB,GACXqB,KAAKQ,SAAS,SAAAC,GAOZ,MAAO,CACLJ,MAPmBI,EAAUJ,MAAMK,IAAI,SAAAC,GAIvC,OAHGA,EAAKhC,KAAOA,IACbgC,EAAKnC,WAAamC,EAAKnC,WAElBmC,wCAQJ,IAAAC,EAAAZ,KAEDa,EAAYb,KAAKI,MAAMC,MAAMK,IAAI,SAAAnC,GAAI,OAAIN,EAAAC,EAAAC,cAAC2C,EAAD,CAAUC,IAAKxC,EAAKI,GAAIJ,KAAMA,EAAMG,aAAckC,EAAKlC,iBAEtG,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,0BACCyC,UA/BSlB,aCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.598c8de0.chunk.js","sourcesContent":["import React, {Component} from \"react\"\r\n\r\nfunction ToDoItem(props) {\r\n\r\n    const completedStyle = {\r\n        fontColor: \"gray\",\r\n        fontStyle: \"italic\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n\r\n    return(\r\n        <div className=\"to-do-item\">\r\n            <input type=\"checkbox\"  checked={props.item.completed} onChange={() => props.handleChange(props.item.id)}/>\r\n            <p style={props.item.completed ? completedStyle : null}>{props.item.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoItem","const todosData = [{\r\n        id: 1,\r\n        text: \"Wake Up\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Breakfast\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Work/Study\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Lunch\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 6,\r\n        text: \"Clean Room\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 7,\r\n        text: \"Dinner\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 8,\r\n        text: \"Something else you may have forgotten\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React, {Component} from \"react\"\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        let date = new Date()\r\n        let hours = date.getHours()\r\n        let timeOfDay\r\n\r\n        const styles = {\r\n            fontSize: 40,\r\n            textAlign: \"center\",\r\n            color: \"whitesmoke\"\r\n        }\r\n\r\n        if(hours < 12) {\r\n            timeOfDay = \"Morning!\"\r\n            styles.color = \"#61dafb\"\r\n        } else if(hours >= 12 && hours < 17) {\r\n            timeOfDay = \"Afternoon!\"\r\n            styles.color = \"gold\"\r\n        } else if(hours >= 17 && hours < 20) {\r\n            timeOfDay = \"Evening!\"\r\n            styles.color = \"tomato\"\r\n        } else {\r\n            timeOfDay = \"Night!\"\r\n            styles.color = \"darkkhaki\"\r\n        }\r\n\r\n\r\n        return(\r\n            <div className=\"header\">\r\n                <h1 className=\"header\" style={styles}>Good {timeOfDay}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\nimport \"./style.css\"\nimport ToDoItem from \"./components/ToDoItem\"\nimport todosData from \"./components/todosData\"\nimport Header from \"./components/Header\"\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      todos: todosData\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(id) {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if(todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n      return {\n        todos: updatedTodos\n      }\n    })\n  }\n  \n  render() {\n\n    const todoItems = this.state.todos.map(item => <ToDoItem key={item.id} item={item} handleChange={this.handleChange}/>)\n\n    return( \n      <div className=\"to-do-container\">\n        <Header />\n        <h1 className=\"heading\">Here's your To Do List</h1>\n        {todoItems}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}